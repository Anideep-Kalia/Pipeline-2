STEPS:
> made a docker multistage image (distroless)
> made deployment, ingres and services file for k8's
> Now using aws eks instead of kubectl 
> make an IAM user(or don't) => configure to terminal by creating access key
> apply all three files of k8 made & edit the service by 'kubectl edit svc {name_of_service}' to nodeport so can be access my machine 
. now get nodes external-ip by kubectl "get nodes -o wide:{port_from_get_svc}" => remember that don't use port:80 here the port:80 is port of machine which is mapped to pod
. access the website using above ip and port
> install nginx(ingres controller)
> now confirm the load balancer is made by ingres controller by command "kubectl get ing"
> Now we have allow host dns in ingres to access the application and so to access the application we have to do dns mapping on our aws node steps below
. nslookup {lb_ip}
. copy the address
. sudo vim /etc/hosts => "{paste_the_address} {dns_allowed_ingres_host}"
> install helm
. copy every k8 file into templates folder => inside deployment file change image version v1 to "{{.Values.image.tag}}"
. in values.yaml these values are actually defined and tag is actual values which will be given which we will change of everytime CI pipeline is runned
. delete all the deployemnts, svc and ingres previously made by: "kubectl delete deploy {name_of_project}"
. inside helm folder run helm install {name_of_project} ./{project_name}-chart
. now everything is back
> CI: 

 
-> We will make a muti-stage docker file 
. so in first stage you can make a basic image to build the project
. and in second stage you can make distroless images for less size and high security =>  The absence of a shell, in particular, means that even if an attacker breaches the container, their capacity to inflict damage or escalate privileges is severely limited.

-> Concept of ingress controller and ingress and load balancer: ingress controller see the ingress and makes load balancer as specified in ingres, here:
. ingress => ingress file
. ingress controller => nginx
. load balancer => made on AWS
->
